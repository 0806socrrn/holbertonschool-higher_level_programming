=============================
The ``0-add_integer`` module
=============================

Using ``add_integer``
---------------------

Import the function:

    >>> add_integer = __import__('0-add_integer').add_integer

test to test the function with the given prototype:
    >>> add_integer(1, 2)
    3

    >>> add_integer(100, -2)
    98

    >>> add_integer(-3, -2)
    -5

    >>> add_integer(10, 11, 0, 2)
    23

    >>> add_integer(-2.9, -0.2)
    -2

    >>> add_integer(2.9, 0.2)
    2

    >>> add_integer(2)
    100

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:
::
    >>> add_integer(3, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer
::
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'
::
    >>> add_integer(1000e1000)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
::
    >>> add_integer("Hello", "World")
    Traceback (most recent call last):
    TypeError: a must be an integer
